# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      dockerfile: Dockerfile.${NODE_ENV:-dev}
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      #   - ./dist:/usr/src/app/dist
      - .:/usr/src/app

  redis:
    image: redis:latest
    restart: always
    ports:
      - 6379:6379
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    restart: always
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
    ports:
      - 9200:9200
      - 9300:9300
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200']
      interval: 10s
      timeout: 5s
      retries: 5
  db:
    image: postgres:18-alpine
    restart: always
    user: postgres
    env_file:
      - .env
    volumes:
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
